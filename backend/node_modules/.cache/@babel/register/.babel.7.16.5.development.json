{
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/yukai/Documents/2nd_grade/web/FP/bombit/backend/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/yukai/Documents/2nd_grade/web/FP/bombit/backend\",\"filename\":\"/Users/yukai/Documents/2nd_grade/web/FP/bombit/backend/server.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/yukai/Documents/2nd_grade/web/FP/bombit/backend\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.16.5": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/yukai/Documents/2nd_grade/web/FP/bombit/backend/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/yukai/Documents/2nd_grade/web/FP/bombit/backend",
      "filename": "/Users/yukai/Documents/2nd_grade/web/FP/bombit/backend/server.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/Users/yukai/Documents/2nd_grade/web/FP/bombit/backend",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/yukai/Documents/2nd_grade/web/FP/bombit/backend/server.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/yukai/Documents/2nd_grade/web/FP/bombit/backend/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/yukai/Documents/2nd_grade/web/FP/bombit/backend/",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "const express = require('express');\n\nconst SocketServer = require('ws').Server; //指定開啟的 port\n\n\nconst PORT = 4000; //創建 express 的物件，並綁定及監聽 port ，且設定開啟後在 console 中提示\n\nconst server = express().listen(PORT, () => console.log(`Listening on ${PORT}`));\nlet player_count = 0; //將 express 交給 SocketServer 開啟 WebSocket 的服務\n\nconst wss = new SocketServer({\n  server\n}); //當 WebSocket 從外部連結時執行\n\nwss.on('connection', ws => {\n  console.log(player_count, 'th Client connected');\n  player_count += 1;\n  ws.send(JSON.stringify({\n    player_uid: player_count,\n    msg: \"connect success! Welcome!\"\n  })); // 這一行就可以回傳物件toPrint\n  //對 message 設定監聽，接收從 Client 發送的訊息\n  // const sendNowTime = setInterval(()=>{\n  //     i=i+1\n  //     ws.send(String(i)+String(new Date()))\n  // },1000)\n\n  ws.onmessage = byteString => {\n    const {\n      data\n    } = byteString;\n    const toPrint = JSON.parse(data); // toPrint 是客戶傳回來的物件\n\n    console.log(\"from client\", toPrint);\n    ws.send(JSON.stringify(toPrint)); // 這一行就可以回傳物件toPrint\n    // let clients = wss.clients\n    // //做迴圈，發送訊息至每個 client\n    // clients.forEach(client => {\n    //     client.send(data)\n    // })\n  };\n\n  ws.on('close', () => {\n    //連線中斷時停止 setInterval\n    // clearInterval(sendNowTime)\n    player_count -= 1;\n    console.log('Close connected');\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsIlNvY2tldFNlcnZlciIsIlNlcnZlciIsIlBPUlQiLCJzZXJ2ZXIiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIiwicGxheWVyX2NvdW50Iiwid3NzIiwib24iLCJ3cyIsInNlbmQiLCJKU09OIiwic3RyaW5naWZ5IiwicGxheWVyX3VpZCIsIm1zZyIsIm9ubWVzc2FnZSIsImJ5dGVTdHJpbmciLCJkYXRhIiwidG9QcmludCIsInBhcnNlIl0sIm1hcHBpbmdzIjoiQUFDQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLE1BQU1DLFlBQVksR0FBR0QsT0FBTyxDQUFDLElBQUQsQ0FBUCxDQUFjRSxNQUFuQyxDLENBRUE7OztBQUNBLE1BQU1DLElBQUksR0FBRyxJQUFiLEMsQ0FFQTs7QUFDQSxNQUFNQyxNQUFNLEdBQUdMLE9BQU8sR0FDakJNLE1BRFUsQ0FDSEYsSUFERyxFQUNHLE1BQU1HLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLGdCQUFlSixJQUFLLEVBQWpDLENBRFQsQ0FBZjtBQUVBLElBQUlLLFlBQVksR0FBRyxDQUFuQixDLENBRUE7O0FBQ0EsTUFBTUMsR0FBRyxHQUFHLElBQUlSLFlBQUosQ0FBaUI7QUFBRUcsRUFBQUE7QUFBRixDQUFqQixDQUFaLEMsQ0FFQTs7QUFDQUssR0FBRyxDQUFDQyxFQUFKLENBQU8sWUFBUCxFQUFxQkMsRUFBRSxJQUFJO0FBQ3ZCTCxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsWUFBWixFQUF5QixxQkFBekI7QUFDQUEsRUFBQUEsWUFBWSxJQUFJLENBQWhCO0FBQ0FHLEVBQUFBLEVBQUUsQ0FBQ0MsSUFBSCxDQUFRQyxJQUFJLENBQUNDLFNBQUwsQ0FBZTtBQUFDQyxJQUFBQSxVQUFVLEVBQUNQLFlBQVo7QUFBeUJRLElBQUFBLEdBQUcsRUFBQztBQUE3QixHQUFmLENBQVIsRUFIdUIsQ0FHK0Q7QUFFdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQUwsRUFBQUEsRUFBRSxDQUFDTSxTQUFILEdBQWdCQyxVQUFELElBQWdCO0FBQzNCLFVBQU07QUFBQ0MsTUFBQUE7QUFBRCxRQUFTRCxVQUFmO0FBQ0EsVUFBTUUsT0FBTyxHQUFHUCxJQUFJLENBQUNRLEtBQUwsQ0FBV0YsSUFBWCxDQUFoQixDQUYyQixDQUVTOztBQUNwQ2IsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksYUFBWixFQUEwQmEsT0FBMUI7QUFFQVQsSUFBQUEsRUFBRSxDQUFDQyxJQUFILENBQVFDLElBQUksQ0FBQ0MsU0FBTCxDQUFlTSxPQUFmLENBQVIsRUFMMkIsQ0FLUztBQUNwQztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0gsR0FaRDs7QUFjQVQsRUFBQUEsRUFBRSxDQUFDRCxFQUFILENBQU0sT0FBTixFQUFlLE1BQU07QUFDakI7QUFDQTtBQUNBRixJQUFBQSxZQUFZLElBQUksQ0FBaEI7QUFDQUYsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksaUJBQVo7QUFDSCxHQUxEO0FBTUgsQ0EvQkQiLCJzb3VyY2VSb290IjoiL1VzZXJzL3l1a2FpL0RvY3VtZW50cy8ybmRfZ3JhZGUvd2ViL0ZQL2JvbWJpdC9iYWNrZW5kLyIsInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKVxuY29uc3QgU29ja2V0U2VydmVyID0gcmVxdWlyZSgnd3MnKS5TZXJ2ZXJcblxuLy/mjIflrprplovllZ/nmoQgcG9ydFxuY29uc3QgUE9SVCA9IDQwMDBcblxuLy/libXlu7ogZXhwcmVzcyDnmoTnianku7bvvIzkuKbntoHlrprlj4rnm6Pogb0gcG9ydCDvvIzkuJToqK3lrprplovllZ/lvozlnKggY29uc29sZSDkuK3mj5DnpLpcbmNvbnN0IHNlcnZlciA9IGV4cHJlc3MoKVxuICAgIC5saXN0ZW4oUE9SVCwgKCkgPT4gY29uc29sZS5sb2coYExpc3RlbmluZyBvbiAke1BPUlR9YCkpXG5sZXQgcGxheWVyX2NvdW50ID0gMDsgXG5cbi8v5bCHIGV4cHJlc3Mg5Lqk57WmIFNvY2tldFNlcnZlciDplovllZ8gV2ViU29ja2V0IOeahOacjeWLmVxuY29uc3Qgd3NzID0gbmV3IFNvY2tldFNlcnZlcih7IHNlcnZlciB9KVxuXG4vL+eVtiBXZWJTb2NrZXQg5b6e5aSW6YOo6YCj57WQ5pmC5Z+36KGMXG53c3Mub24oJ2Nvbm5lY3Rpb24nLCB3cyA9PiB7XG4gICAgY29uc29sZS5sb2cocGxheWVyX2NvdW50LCd0aCBDbGllbnQgY29ubmVjdGVkJylcbiAgICBwbGF5ZXJfY291bnQgKz0gMVxuICAgIHdzLnNlbmQoSlNPTi5zdHJpbmdpZnkoe3BsYXllcl91aWQ6cGxheWVyX2NvdW50LG1zZzpcImNvbm5lY3Qgc3VjY2VzcyEgV2VsY29tZSFcIn0pKSAgICAvLyDpgJnkuIDooYzlsLHlj6/ku6Xlm57lgrPnianku7Z0b1ByaW50XG5cbiAgICAvL+WwjSBtZXNzYWdlIOioreWumuebo+iBve+8jOaOpeaUtuW+niBDbGllbnQg55m86YCB55qE6KiK5oGvXG4gICAgLy8gY29uc3Qgc2VuZE5vd1RpbWUgPSBzZXRJbnRlcnZhbCgoKT0+e1xuICAgIC8vICAgICBpPWkrMVxuICAgIC8vICAgICB3cy5zZW5kKFN0cmluZyhpKStTdHJpbmcobmV3IERhdGUoKSkpXG4gICAgLy8gfSwxMDAwKVxuXG4gICAgd3Mub25tZXNzYWdlID0gKGJ5dGVTdHJpbmcpID0+IHtcbiAgICAgICAgY29uc3Qge2RhdGF9ID0gYnl0ZVN0cmluZ1xuICAgICAgICBjb25zdCB0b1ByaW50ID0gSlNPTi5wYXJzZShkYXRhKSAgICAvLyB0b1ByaW50IOaYr+WuouaItuWCs+WbnuS+hueahOeJqeS7tlxuICAgICAgICBjb25zb2xlLmxvZyhcImZyb20gY2xpZW50XCIsdG9QcmludClcblxuICAgICAgICB3cy5zZW5kKEpTT04uc3RyaW5naWZ5KHRvUHJpbnQpKSAgICAvLyDpgJnkuIDooYzlsLHlj6/ku6Xlm57lgrPnianku7Z0b1ByaW50XG4gICAgICAgIC8vIGxldCBjbGllbnRzID0gd3NzLmNsaWVudHNcblxuICAgICAgICAvLyAvL+WBmui/tOWciO+8jOeZvOmAgeioiuaBr+iHs+avj+WAiyBjbGllbnRcbiAgICAgICAgLy8gY2xpZW50cy5mb3JFYWNoKGNsaWVudCA9PiB7XG4gICAgICAgIC8vICAgICBjbGllbnQuc2VuZChkYXRhKVxuICAgICAgICAvLyB9KVxuICAgIH1cblxuICAgIHdzLm9uKCdjbG9zZScsICgpID0+IHtcbiAgICAgICAgLy/pgKPnt5rkuK3mlrfmmYLlgZzmraIgc2V0SW50ZXJ2YWxcbiAgICAgICAgLy8gY2xlYXJJbnRlcnZhbChzZW5kTm93VGltZSlcbiAgICAgICAgcGxheWVyX2NvdW50IC09IDFcbiAgICAgICAgY29uc29sZS5sb2coJ0Nsb3NlIGNvbm5lY3RlZCcpXG4gICAgfSlcbn0pIl19",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "express",
        "require",
        "SocketServer",
        "Server",
        "PORT",
        "server",
        "listen",
        "console",
        "log",
        "player_count",
        "wss",
        "on",
        "ws",
        "send",
        "JSON",
        "stringify",
        "player_uid",
        "msg",
        "onmessage",
        "byteString",
        "data",
        "toPrint",
        "parse"
      ],
      "mappings": "AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,IAAD,CAAP,CAAcE,MAAnC,C,CAEA;;;AACA,MAAMC,IAAI,GAAG,IAAb,C,CAEA;;AACA,MAAMC,MAAM,GAAGL,OAAO,GACjBM,MADU,CACHF,IADG,EACG,MAAMG,OAAO,CAACC,GAAR,CAAa,gBAAeJ,IAAK,EAAjC,CADT,CAAf;AAEA,IAAIK,YAAY,GAAG,CAAnB,C,CAEA;;AACA,MAAMC,GAAG,GAAG,IAAIR,YAAJ,CAAiB;AAAEG,EAAAA;AAAF,CAAjB,CAAZ,C,CAEA;;AACAK,GAAG,CAACC,EAAJ,CAAO,YAAP,EAAqBC,EAAE,IAAI;AACvBL,EAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ,EAAyB,qBAAzB;AACAA,EAAAA,YAAY,IAAI,CAAhB;AACAG,EAAAA,EAAE,CAACC,IAAH,CAAQC,IAAI,CAACC,SAAL,CAAe;AAACC,IAAAA,UAAU,EAACP,YAAZ;AAAyBQ,IAAAA,GAAG,EAAC;AAA7B,GAAf,CAAR,EAHuB,CAG+D;AAEtF;AACA;AACA;AACA;AACA;;AAEAL,EAAAA,EAAE,CAACM,SAAH,GAAgBC,UAAD,IAAgB;AAC3B,UAAM;AAACC,MAAAA;AAAD,QAASD,UAAf;AACA,UAAME,OAAO,GAAGP,IAAI,CAACQ,KAAL,CAAWF,IAAX,CAAhB,CAF2B,CAES;;AACpCb,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0Ba,OAA1B;AAEAT,IAAAA,EAAE,CAACC,IAAH,CAAQC,IAAI,CAACC,SAAL,CAAeM,OAAf,CAAR,EAL2B,CAKS;AACpC;AAEA;AACA;AACA;AACA;AACH,GAZD;;AAcAT,EAAAA,EAAE,CAACD,EAAH,CAAM,OAAN,EAAe,MAAM;AACjB;AACA;AACAF,IAAAA,YAAY,IAAI,CAAhB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACH,GALD;AAMH,CA/BD",
      "sourceRoot": "/Users/yukai/Documents/2nd_grade/web/FP/bombit/backend/",
      "sourcesContent": [
        "\nconst express = require('express')\nconst SocketServer = require('ws').Server\n\n//指定開啟的 port\nconst PORT = 4000\n\n//創建 express 的物件，並綁定及監聽 port ，且設定開啟後在 console 中提示\nconst server = express()\n    .listen(PORT, () => console.log(`Listening on ${PORT}`))\nlet player_count = 0; \n\n//將 express 交給 SocketServer 開啟 WebSocket 的服務\nconst wss = new SocketServer({ server })\n\n//當 WebSocket 從外部連結時執行\nwss.on('connection', ws => {\n    console.log(player_count,'th Client connected')\n    player_count += 1\n    ws.send(JSON.stringify({player_uid:player_count,msg:\"connect success! Welcome!\"}))    // 這一行就可以回傳物件toPrint\n\n    //對 message 設定監聽，接收從 Client 發送的訊息\n    // const sendNowTime = setInterval(()=>{\n    //     i=i+1\n    //     ws.send(String(i)+String(new Date()))\n    // },1000)\n\n    ws.onmessage = (byteString) => {\n        const {data} = byteString\n        const toPrint = JSON.parse(data)    // toPrint 是客戶傳回來的物件\n        console.log(\"from client\",toPrint)\n\n        ws.send(JSON.stringify(toPrint))    // 這一行就可以回傳物件toPrint\n        // let clients = wss.clients\n\n        // //做迴圈，發送訊息至每個 client\n        // clients.forEach(client => {\n        //     client.send(data)\n        // })\n    }\n\n    ws.on('close', () => {\n        //連線中斷時停止 setInterval\n        // clearInterval(sendNowTime)\n        player_count -= 1\n        console.log('Close connected')\n    })\n})"
      ]
    },
    "sourceType": "module",
    "mtime": 1640797580988
  }
}